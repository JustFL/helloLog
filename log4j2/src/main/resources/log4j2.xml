<?xml version="1.0" encoding="UTF-8" ?>
<!--
    status="warn" 日志框架本身的输出日志级别 可以修改为debug
    monitorInterval="5" 自动加载配置文件的间隔时间 不低于5秒 生产环境中修改配置文件 是热更新 无需重启应用
 -->
<configuration status="warn" monitorInterval="5">
    <!--
    集中配置属性进行管理
    使用时通过:${name}
    -->
    <properties>
        <property name="LOG_HOME">logs</property>
        <property name="MIDV">log4j2:[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%c-%t]:%L --- %m%n</property>
        <property name="MIDE">log4j2:[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l{36} - %m%n</property>
    </properties>

    <!-- 日志处理 -->
    <Appenders>
        <!-- 控制台输出 appender SYSTEM_OUT输出黑色 SYSTEM_ERR输出红色 -->
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="${MIDV}" />
        </Console>

        <Console name="async-console" target="SYSTEM_OUT">
            <PatternLayout pattern="${MIDV}" />
        </Console>

        <!-- 日志文件输出 appender -->
        <File name="file" fileName="${LOG_HOME}/log4j2.log">
            <PatternLayout pattern="${MIDV}" />
        </File>

        <!-- 使用随机读写流的日志文件输出appender 性能提高 -->
        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/access.log">
            <PatternLayout pattern="${MIDE}" />
        </RandomAccessFile>

        <!-- 按照一定规则拆分的日志文件的appender -->  <!-- 拆分后的文件 -->
        <!-- filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd-HH-mm}-%i.log"> -->
        <RollingFile name="rollingFile" fileName="${LOG_HOME}/rollog.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/rollog-%d{yyyy-MM-dd}-%i.log">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 日志消息格式 -->
            <PatternLayout pattern="${MIDE}" />
            <Policies>
                <!-- 在系统启动时 触发拆分规则 生产一个新的日志文件 -->
                <OnStartupTriggeringPolicy />
                <!-- 按照文件大小拆分 2MB 10KB-->
                <SizeBasedTriggeringPolicy size="10KB" />
                <!-- 按照时间节点拆分 规则根据filePattern定义的 -->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!-- 在同一个目录下 文件的个限定为 30个 超过进行覆盖 -->
            <DefaultRolloverStrategy max="30" />
        </RollingFile>

        <!-- 使用AsyncAppender做日志异步处理 -->
        <Async name="MIAA">
            <!-- 将控制台输出Appender做异步处理 这样做会单独为记录日志分配一个线程 不影响业务代码的执行 -->
            <AppenderRef ref="async-console" />
        </Async>

    </Appenders>

    <!-- logger 定义 -->
    <Loggers>
        <!-- 使用 rootLogger 配置 日志级别 level="trace" -->
        <Root level="trace">
            <!-- 指定日志使用的处理器 -->
            <AppenderRef ref="console" />

<!--            <AppenderRef ref="file" />-->
<!--            <AppenderRef ref="rollingFile" />-->
<!--            <AppenderRef ref="accessFile" />-->
<!--            <AppenderRef ref="MIAA" />-->
        </Root>

        <!-- 自定义异步 logger
            additivity表示不继承root logger
            includeLocation表示去除日志记录中的行号信息 因为行号信息严重影响日志记录效率 生产环境中都不加行号
        -->
        <AsyncLogger name="com.javbus" level="trace" includeLocation="false" additivity="false">
            <AppenderRef ref="console" />
        </AsyncLogger>
    </Loggers>
</configuration>