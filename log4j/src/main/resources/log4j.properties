# e.g log4j.rootLogger = log level,appender name1,appender name2...
log4j.rootLogger = TRACE,console,file,rollingfile,dailyfile

# Appender types
# 1.org.apache.log4j.ConsoleAppender
# 2.org.apache.log4j.FileAppender
# 3.org.apache.log4j.DailyRollingFileAppender 按照时间拆分日志文件 是FileAppender的子对象 可以继承FileAppender的一些属性
# 4.org.apache.log4j.RollingFileAppender 按照日志文件大小拆分 同是FileAppender的子对象
# 5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）


############################################################
# Console
############################################################
# use Apache's ConsoleAppender, so we name it "console"
log4j.appender.console = org.apache.log4j.ConsoleAppender
# use "org.apache.log4j.PatternLayout" to customize the layout for console appender
log4j.appender.console.layout = org.apache.log4j.PatternLayout
# [%10p] [%-10p]
log4j.appender.console.layout.ConversionPattern = [%-5p] %c:%t %d{yyyy-MM-dd HH:mm:ss} %m%n

############################################################
# File
############################################################
# use Apache's FileAppender, so we name it "file", moreover we should add "file" appender to "log4j.rootLogger"
log4j.appender.file = org.apache.log4j.FileAppender
# specifies the log file path. The first "file" is the appender's name, the second "file" is properties name. The default path is project address.
log4j.appender.file.file = log4j.log
# log4j.appender.file.append = true
# specifies encoding
log4j.appender.file.encoding = UTF-8
# file appender's layout type
log4j.appender.file.layout = org.apache.log4j.PatternLayout
# customize layout
log4j.appender.file.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%c:%t]-[%p] %m%n


############################################################
# RollingFileAppender
############################################################
log4j.appender.rollingfile = org.apache.log4j.RollingFileAppender
log4j.appender.rollingfile.file = log4j-rollingfile.log
log4j.appender.rollingfile.encoding = UTF-8
log4j.appender.rollingfile.layout = org.apache.log4j.PatternLayout
log4j.appender.rollingfile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%c:%t]-[%p] %m%n
# specify the file size
log4j.appender.rollingfile.maxFileSize = 1KB
# specify the number of the files
log4j.appender.rollingfile.maxBackupIndex = 10


############################################################
# DailyRollingFileAppender
############################################################
log4j.appender.dailyfile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyfile.file = log4j-dailyfile.log
log4j.appender.dailyfile.encoding = UTF-8
log4j.appender.dailyfile.layout = org.apache.log4j.PatternLayout
log4j.appender.dailyfile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%c:%t]-[%p] %m%n
# specifies the date split rules
log4j.appender.dailyfile.datePattern = '.'yyyy-MM-dd-HH-mm-ss

# customize Logger
log4j.logger.org.apache = error





# -X号: X信息输出时左对齐 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式
# 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
# 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。

# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss SSS}
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10)
# %L 输出代码中行号